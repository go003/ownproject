为了能读懂手册，伪类型
    mixed（混合类型） 
        表示可以接受2种或2种以上的类型
    number（数字类型） 
        表示可以接受int或者float
    callback（回调类型）
        有个别名callable，表示要接受一个函数
    $...
        表示可以接受任意个参数
    void
        返回值：表示没有返回值
        参数：表示不接受参数

PHP中的数据类型：
	4种标量
		布尔型 	Boolean|bool
		整型 	integer|int
		浮点型 	float
		字符串 	string

    2种复合类型
        数组  array
        对象  object

    2种特殊类型
        资源  resource
        null 

单双引号的区别：
    1. 双引号解析变量，单引号不解析，原样输出
    2. 双引号解析转义字符，单引号不解析
        \n 换行 
        \r 回车
        \t 水平制表符 

    注意：单双引号可以互插，如果想要自己嵌套自己需要用\转义。

    建议：能用单引号的情况下就只用单引号

强制转换
    (bool)
    (int)
    (float)
    (string)
    (array)
    (object)
    (unset)

自动转换（隐式转换）
    布尔型的情况
    数值
    字符串

类型判断:(is_8大类型)
    4种标量
    is_string()
    is_int()
    is_float()
    is_bool()

    is_array()
    is_object()
    is_null()
    is_resource()
    

    is_numeric() 判断是否是一个数字或者纯洁的数字字符串
    is_scalar() 判断是否是标量


常量的定义
    define('常量名', '常量值');
    const 常量名 = '常量值';
   
    常量名：
        和变量名一样，只能是数字、字母或下划线；
        不能以数字开头 (定义的时候可以，但用不了)
        严格区分大小写（define可以通过第3个参数指定是否区分大小写,true不区分）
    常量值：
        define定义的常量，除了object之外，都可以；（数组是PHP7新加的）
        const定义的常量值，不能是资源和对象；
    一经定义，不能删除和改变。
    注意：无法重复定义相同的常量

预定义常量
    get_defined_constants() 获取所有定义好的常量

魔术常量
    __LINE__    获取当前行号
    __FILE__    获取当前文件路径
    __DIR__     获取当前文件所在的目录

pre配合print_r能看到一些不该看到的东西
echo '<pre>';
    print_r(get_defined_constants());
echo '</pre>';


运算符
    一元运算符
        ++ -- -
    二元运算符
        + - * /
    三元运算符
        可以接受3个值
        表达式1 ? 表达式2 : 表达式3 

算术运算符
    + - * / 
    % 取余(求模)
        求两个数之间的余数

递增/递减  ++/--
    ++
        $i++;  //后递增: 先返回$i,再将$i的值加1，下次用的时候值就是加1后的
        ++$i;  //前递增：先将$i的值加1,然后返回加过1后的$i
    --
        $i--;   //同上
        --$i;
    提示：对布尔值无效

字符串运算符
    . 字符串的拼接
    .= 将右边的字符串附加到左边之后


逻辑运算符
    逻辑与: &&  and
        只有两边都为true，结果才为true

    逻辑或: ||  or
        只要有任何一边为true，结果就为true
逻辑与和或都会短路：前面为true，后面就不再执行
    比如：true || $a = 30; //$a未定义

    逻辑非: ! 
        取反
        例：
            $bool = true;
            !$bool  //结果就是false

    逻辑异或: xor
        两边不一样才为真，否则返回false


位运算符(了解)
    &   按位与
    |   按位或
    ^   按位异或

其他运算符
    三元运算符 ?:
        表达式1 ? 表达式2 : 表达式3
        表达式1为真，则返回表达式2，否则返回表达式3
        不要嵌套三元运算符

    @ 错误抑制符，可以用于屏蔽错误

    `` 执行运算符，可以执行一些系统命令(可能会存在安全隐患)
        英文状态下，1左边的按键

流程控制
    分支
        if (表达式) {
            真区间
        } else {
            假区间
        }