正则表达式 
    1、什么是正则表达式？
        正则表达式是一个从左到右匹配目标字符串的模式
    2、作用
        1.用于匹配（比如匹配邮箱、手机号）
        2.用于替换(可以用新的东西把符合你条件的东西给替换了)
        3.用于提取想要的内容
    3、学习正则的流程
        1.正则的语法
        2.正则的函数

正则语法
    1、分隔符
        在PHP中，正则表达式其实就是一个用分隔符包裹着的特殊的字符串，比如：
            $pattern = '/\d/';

        常用的分隔符为'/'，但是不仅限于'/'；分隔符可以是任意非字母、数字、非反斜线、非空白字符，比如：#、$、%。。。
    2、原子
    原子是组成正则表达式的最小单位，每个正则表达式最少要包含一个原子！

    原子的类型：
        1.普通字符做为原子
            比如：0~9 a~z A~Z...等等
        2.特殊字符做为原子
            比如：$ . * ? ^...等等
            一般标点符号和其他在正则中有意义的符号，想做为原子都需要加转义斜线\
            提示：部分标点符号不用加\也可以，但是，加了也不会出错！比如逗号,
        3.非打印字符（转义字符）
            \r \n \t \\ ...等等
        4.通用字符类型做为原子
            \d  匹配0~9之间的数字
            \D  匹配除了0~9之间的数字之外的
            \w  匹配数字、字母、下划线
            \W  匹配除了数字、字母、下划线
            \s  匹配任意个空白符
            \S  匹配除了空白符之外的
        5.自定义原子列表
            用[]自定义原子列表
            比如：'/[abc]/'表示abc任何一个都可以
            1.中横线-可以表示范围：1-9|a-z
            2.^可以表示除了

    3、元字符：拥有特殊的含义，不再单纯的表示自己
        1、字符串的边界
            ^ 表示匹配开始位置
            $ 表示匹配结束位置
        2、重复匹配：
            这几个元字符表示量词，用于修饰前面一个原子的个数
            ?   表示0次或1次
            +   表示1次或多次
            *   表示0次、1次或多次（任意次）
        3、通配符：点号.
            匹配除了换行符\n之外的任意一个字符
        4、重复匹配之自定义量词
            元字符{}，用于自定义量词
            {n}     表示前面的原子为n次
            {n,}    表示前面的原子最少为n次，可以大于n次
            {n,m}   表示前面的原子最少为n次，最多为m次
        5、原子列表 []
            元字符[]，用于定义原子列表（详情请见：6.正则的原子.php）
        6、模式选择符 | (或者叫表达式选择符)
            从|隔开的正则表达式中任意选一个来用
        7、模式单元 ()
            元字符()可以将正则表达式变成一个单元，将表达式看成一个原子来使用

            1、系统会自动将()中匹配的值存储起来，有需要时可以通过\\1、\\2、\\n或者$1、$2、$n的方式反向引用
            2、不想存储()中的值，可以用?:取消存储

    4、模式修正符：
        对整个表达式进行修饰，如：'/abc/i'
        i   表示忽略大小写
        U   修改量词的贪婪模式
            量词默认是贪婪的，表示的数尽可能的多
        x 忽略正则表达式中的空格
        s 全匹配符.将匹配任意字符，包括\n换行
        m 将字符串视为多行

正则函数：
    preg_match('正则', $str[, 匹配到的值[, 是否存储下标[, 从哪儿开始匹配]]])
        匹配到的值：第0个，为匹配到的整体字符串；之后依次放()里面匹配到的值，默认为一维数组
        是否存储下标：PREG_OFFSET_CAPTURE存储下标，会将$m变为二维数组
        从哪儿开始匹配：默认为0，匹配整个字符串
        返回值：返回匹配次数，0次或1次

        匹配上1次，就停止匹配，返回结果

    preg_match_all('正则', $str[, 匹配到的值[, 是否存储下标[, 从哪儿开始匹配]]])
        匹配到的值：第0个，为匹配到的整体字符串；之后依次放()里面匹配到的值，默认为二维数组
        是否存储下标：PREG_OFFSET_CAPTURE存储下标，会将$m变为二维数组
        从哪儿开始匹配：默认为0，匹配整个字符串
        返回值：返回匹配次数，0次或1次

    preg_replace('正则', '替换成', '在哪儿换');
        执行一个正则表达式的搜索和替换
        
        将正则匹配到的内容替换成指定内容；如果没匹配到，返回原字符串

    正则切割
        preg_split('正则', '要切的字符串')
            用正则表达式切割字符串